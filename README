This is the README file for SOAP Service Tester - an application for
 low-level testing of SOAP Services.

Author: Bogdan Drozdowski, bogdandr @ op . pl
License: AGPLv3+

================================================================

Requirements for compiling the application:

- a non-root account. Please, NEVER compile or 'make' anything as root.

- a working Java compiler.

- development kit for the Java language

- the following JAR files on your CLASSPATH:

	* wsdl4j.jar (1.6.2 is OK) - the WSDL4J project
		(http://wsdl4j.sf.net/),
	* xbean.jar (2.5.0 is OK) - the Apache XmlBeans
		(http://xmlbeans.apache.org/),
	* httpclient.jar (4.1.1 is OK) - the Apache HttpComponents
		(http://hc.apache.org/),
	* httpcore.jar (4.1 is OK) - the Apache HttpComponents,
	* commons-logging.jar (1.1.1 is OK) - the Apache HttpComponents
	* servlet-api.jar - from your JavaEE servlet container/server
	* optional (for interpreting the SOAP response):
		axiom.jar (1.2.12 is OK) - Apache Axiom
		(http://ws.apache.org/axiom/)
	* optional (for interpreting the SOAP response):
		axis2-saaj.jar (1.6.1 is OK) - Apache Axis2
		(http://axis.apache.org/axis2/java/core)
	* optional (for HTTP authentications):
		commons-codec.jar (1.5 is OK) - Apache Commons Codec
		(http://commons.apache.org/codec/)

- recommended: the GNU 'make' utility

If you'll be using 'make', change the paths to the JAR files in the Makefile.

Type 'make' to compile the application. Alternatively, you can compile the
 classes yourself.

Type 'make deploy' or copy the required files into the "deploy" directory:
 deploy/WEB-INF/classes/BogDroSoft/soaptest/.

Type 'make war' to create a Web Archive (WAR) file ready for deployment.
 Alternatively, you can create a ZIP archive from the contents of the
 "deploy" directory (the "deploy" directory itself MUST NOT be in the
 archive).

================================================================

How to run:
1. deploy the application on your server with
   the following JAR files on your CLASSPATH:

	* wsdl4j.jar (1.6.2 is OK) - the WSDL4J project
		(http://wsdl4j.sf.net/),
	* xbean.jar (2.5.0 is OK) - the Apache XmlBeans
		(http://xmlbeans.apache.org/),
	* httpclient.jar (4.1.1 is OK) - the Apache HttpComponents
		(http://hc.apache.org/),
	* httpcore.jar (4.1 is OK) - the Apache HttpComponents,
	* commons-logging.jar (1.1.1 is OK) - the Apache HttpComponents
	* servlet-api.jar - from your JavaEE servlet container/server
	* optional (for interpreting the SOAP response):
		axiom.jar (1.2.12 is OK) - Apache Axiom
		(http://ws.apache.org/axiom/)
	* optional (for interpreting the SOAP response):
		axis2-saaj.jar (1.6.1 is OK) - Apache Axis2
		(http://axis.apache.org/axis2/java/core)
	* optional (for HTTP authentications):
		commons-codec.jar (1.5 is OK) - Apache Commons Codec
		(http://commons.apache.org/codec/)

2. access it from a browser
3. type the WSDL address and proceed
4. choose the operation to run, fill the data and press the button with
   the operation's name.

You can start from the page with the list of operations by passing the
 address of the WSDL file in the URL.


