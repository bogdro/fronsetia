This is the README file for Fronsetia (Free Online Service Testing
 Application), a web application that allows testing webservices.

Fronsetia allows you to:

- send customised requests to a webservice,
- read WSDL definitions,
- override or remove the standard HTTP headers from the request to be sent,
- set any other HTTP header you wish,
- set the protocol name and version,
- use protocol methods other than the regular POST,
- set the sent Content-Type,
- authenticate to the webservice,
- use a proxy and authenticate to the proxy,
- accept any TLS/SSL certificate (useful for test environments),
- manually set the SOAP content (prologue, headers, body and the XML before
  them, after them and in between),
- set the character set of the request,
- view the SOAP response,
- view the response's HTTP code and status line,
- view the response's HTTP headers,
- verify if there was a SOAP Fault in the response,
- pretty-print the response by splitting it after closing tags.

You can think of Fronsetia as a simple version of SoapUI
(https://www.soapui.org/) on the web, or a simple and free and
open-source version of the wls_utc utility (but less powerful -
for example, it doesn't interpret the service's schema to provide
separate fields for various parameters).

Features:

- supports REST Web Services,
- supports Web Services Description Language (WSDL),
- supports Simple Object Access Protocol (SOAP),
- supports Hypertext Transfer Protocol (HTTP),
- supports HTTP Authentication,
- supports the same versions of Transport Layer Security (TLS) and Secure
  Sockets Layer (SSL) as the server the application will be running on,
- supports HTTP Proxying,
- supports the the Jakarta EE platform version 10 (modern Java servers),
- portable and system-independent.

Fronsetia was previously called SOAPServiceTester.

Author: Bogdan Drozdowski, bogdro &AT% users . sourceforge . net
License: AGPLv3+

Project homepage: https://fronsetia.sourceforge.io/

================================================================

Requirements for compiling the application:

- the development kit for the Java language (JDK),

- Apache Maven (https://maven.apache.org).

Type 'mvn package' to compile the application.
Alternatively, you can use a 'make' utility and run just 'make' (which
 calls Maven now anyway).

By default, a self-contained package, with all the required libraries inside,
 is built.

You can also build a minimal package without all the required libraries
inside by adding

	<scope>provided</scope>

tags to each <dependency> in "pom.xml" (expect where already present and has
 a different value) and re-building the application (running 'mvn package').

================================================================

How to run:

- If you've built a self-contained package with all the required libraries
  inside, simply deploy the application on your server.

- If you've built a minimal package without all the required libraries
  inside:

  1. Add the JAR files listed in pom.xml in the versions given there (and
     their dependencies) to your server's CLASSPATH.
  2. Re-start your server if necessary.
  3. Deploy the application on your server.

You can get all the JAR libraries from https://central.sonatype.com/ (as for
all Maven libraries) or the respective projects' pages:

- wsdl4j.jar - the WSDL4J project (http://wsdl4j.sf.net/),
- xbean.jar - the Apache XmlBeans (https://xmlbeans.apache.org/),
- httpclient.jar - the Apache HttpComponents (https://hc.apache.org/),
- httpcore.jar - the Apache HttpComponents,
- commons-logging.jar - the Apache HttpComponents
- commons-codec.jar - Apache Commons Codec
  (https://commons.apache.org/proper/commons-codec/)
- axiom.jar - Apache Axiom (https://ws.apache.org/axiom/)
- axis2-saaj.jar - Apache Axis2 (https://axis.apache.org/axis2/java/core/)

The jakarta.jakartaee-api dependency should be provided by your JavaEE
 servlet container/server.

The junit.jar dependency (and all other with <scope>test</scope>) are not
 required to build or run the application.

================================================================

How to use:

1. Access the application on the server from a browser. The exact URL depends
   on your server and the name you gave the application.
2. Type the WSDL address on the application's main page and proceed.
3. Choose the operation to run, fill the data and press the button with
   the operation's name.

You can start from the page with the list of operations by passing the
 address of the WSDL file in the URL.
